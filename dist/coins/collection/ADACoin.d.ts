export default ADACoin;
/**
 * Description placeholder
 * @date 6/20/2023 - 4:41:59 PM
 *
 * @class ADACoin
 * @typedef {ADACoin}
 * @extends {HasProviders(Coin)}
 */
declare class ADACoin {
    constructor({ alias, notify, feeData, explorers, txWebUrl, submitUrl, socket, id }: {
        alias: any;
        notify: any;
        feeData: any;
        explorers: any;
        txWebUrl: any;
        submitUrl: any;
        socket: any;
        id: any;
    }, db: any, configManager: any);
    /** @type {import('./libs/AdaLibApi').default|null} */
    coreLibrary: any | null;
    /** @type {object|null} */
    cardanoWalletV2: object | null;
    /** @type {object|null} */
    cardanoWalletV4: object | null;
    derivation: string;
    feePerByte: any;
    constantPart: any;
    feeParams: {
        feeCoefficient: any;
        feeConst: any;
    };
    dustAmount: string;
    loadLibsPromise: () => Promise<object[] | [{
        default: typeof import("cardano-wallet");
        paper_wallet_scramble(entropy: import("cardano-wallet").Entropy, iv: Uint8Array, password: string): any;
        paper_wallet_unscramble(paper: Uint8Array, password: string): import("cardano-wallet").Entropy;
        password_encrypt(password: string, salt: Uint8Array, nonce: Uint8Array, data: Uint8Array): any;
        password_decrypt(password: string, encrypted_data: Uint8Array): any;
        AccountIndex: typeof import("cardano-wallet").AccountIndex;
        Address: typeof import("cardano-wallet").Address;
        AddressKeyIndex: typeof import("cardano-wallet").AddressKeyIndex;
        Bip44AccountPrivate: typeof import("cardano-wallet").Bip44AccountPrivate;
        Bip44AccountPublic: typeof import("cardano-wallet").Bip44AccountPublic;
        Bip44ChainPrivate: typeof import("cardano-wallet").Bip44ChainPrivate;
        Bip44ChainPublic: typeof import("cardano-wallet").Bip44ChainPublic;
        Bip44RootPrivateKey: typeof import("cardano-wallet").Bip44RootPrivateKey;
        BlockchainSettings: typeof import("cardano-wallet").BlockchainSettings;
        Coin: typeof import("cardano-wallet").Coin;
        CoinDiff: typeof import("cardano-wallet").CoinDiff;
        DaedalusAddressChecker: typeof import("cardano-wallet").DaedalusAddressChecker;
        DaedalusCheckedAddress: typeof import("cardano-wallet").DaedalusCheckedAddress;
        DaedalusWallet: typeof import("cardano-wallet").DaedalusWallet;
        DerivationScheme: typeof import("cardano-wallet").DerivationScheme;
        Entropy: typeof import("cardano-wallet").Entropy;
        InputSelectionBuilder: typeof import("cardano-wallet").InputSelectionBuilder;
        InputSelectionResult: typeof import("cardano-wallet").InputSelectionResult;
        LinearFeeAlgorithm: typeof import("cardano-wallet").LinearFeeAlgorithm;
        OutputPolicy: typeof import("cardano-wallet").OutputPolicy;
        PrivateKey: typeof import("cardano-wallet").PrivateKey;
        PrivateRedeemKey: typeof import("cardano-wallet").PrivateRedeemKey;
        PublicKey: typeof import("cardano-wallet").PublicKey;
        PublicRedeemKey: typeof import("cardano-wallet").PublicRedeemKey;
        RedeemSignature: typeof import("cardano-wallet").RedeemSignature;
        Signature: typeof import("cardano-wallet").Signature;
        SignedTransaction: typeof import("cardano-wallet").SignedTransaction;
        Transaction: typeof import("cardano-wallet").Transaction;
        TransactionBuilder: typeof import("cardano-wallet").TransactionBuilder;
        TransactionFinalized: typeof import("cardano-wallet").TransactionFinalized;
        TransactionId: typeof import("cardano-wallet").TransactionId;
        TransactionSignature: typeof import("cardano-wallet").TransactionSignature;
        TxInput: typeof import("cardano-wallet").TxInput;
        TxOut: typeof import("cardano-wallet").TxOut;
        TxoPointer: typeof import("cardano-wallet").TxoPointer;
        Witness: typeof import("cardano-wallet").Witness;
    }, {
        default: typeof import("@emurgo/cardano-serialization-lib-nodejs");
        encode_json_str_to_plutus_datum(json: string, schema: number): import("@emurgo/cardano-serialization-lib-nodejs").PlutusData;
        decode_plutus_datum_to_json_str(datum: import("@emurgo/cardano-serialization-lib-nodejs").PlutusData, schema: number): string;
        encode_arbitrary_bytes_as_metadatum(bytes: Uint8Array): import("@emurgo/cardano-serialization-lib-nodejs").TransactionMetadatum;
        decode_arbitrary_bytes_from_metadatum(metadata: import("@emurgo/cardano-serialization-lib-nodejs").TransactionMetadatum): Uint8Array;
        encode_json_str_to_metadatum(json: string, schema: number): import("@emurgo/cardano-serialization-lib-nodejs").TransactionMetadatum;
        decode_metadatum_to_json_str(metadatum: import("@emurgo/cardano-serialization-lib-nodejs").TransactionMetadatum, schema: number): string;
        min_fee(tx: import("@emurgo/cardano-serialization-lib-nodejs").Transaction, linear_fee: import("@emurgo/cardano-serialization-lib-nodejs").LinearFee): import("@emurgo/cardano-serialization-lib-nodejs").BigNum;
        calculate_ex_units_ceil_cost(ex_units: import("@emurgo/cardano-serialization-lib-nodejs").ExUnits, ex_unit_prices: import("@emurgo/cardano-serialization-lib-nodejs").ExUnitPrices): import("@emurgo/cardano-serialization-lib-nodejs").BigNum;
        min_script_fee(tx: import("@emurgo/cardano-serialization-lib-nodejs").Transaction, ex_unit_prices: import("@emurgo/cardano-serialization-lib-nodejs").ExUnitPrices): import("@emurgo/cardano-serialization-lib-nodejs").BigNum;
        encrypt_with_password(password: string, salt: string, nonce: string, data: string): string;
        decrypt_with_password(password: string, data: string): string;
        create_send_all(address: import("@emurgo/cardano-serialization-lib-nodejs").Address, utxos: import("@emurgo/cardano-serialization-lib-nodejs").TransactionUnspentOutputs, config: import("@emurgo/cardano-serialization-lib-nodejs").TransactionBuilderConfig): import("@emurgo/cardano-serialization-lib-nodejs").TransactionBatchList;
        make_daedalus_bootstrap_witness(tx_body_hash: import("@emurgo/cardano-serialization-lib-nodejs").TransactionHash, addr: import("@emurgo/cardano-serialization-lib-nodejs").ByronAddress, key: import("@emurgo/cardano-serialization-lib-nodejs").LegacyDaedalusPrivateKey): import("@emurgo/cardano-serialization-lib-nodejs").BootstrapWitness;
        make_icarus_bootstrap_witness(tx_body_hash: import("@emurgo/cardano-serialization-lib-nodejs").TransactionHash, addr: import("@emurgo/cardano-serialization-lib-nodejs").ByronAddress, key: import("@emurgo/cardano-serialization-lib-nodejs").Bip32PrivateKey): import("@emurgo/cardano-serialization-lib-nodejs").BootstrapWitness;
        make_vkey_witness(tx_body_hash: import("@emurgo/cardano-serialization-lib-nodejs").TransactionHash, sk: import("@emurgo/cardano-serialization-lib-nodejs").PrivateKey): import("@emurgo/cardano-serialization-lib-nodejs").Vkeywitness;
        hash_auxiliary_data(auxiliary_data: import("@emurgo/cardano-serialization-lib-nodejs").AuxiliaryData): import("@emurgo/cardano-serialization-lib-nodejs").AuxiliaryDataHash;
        hash_transaction(tx_body: import("@emurgo/cardano-serialization-lib-nodejs").TransactionBody): import("@emurgo/cardano-serialization-lib-nodejs").TransactionHash;
        hash_plutus_data(plutus_data: import("@emurgo/cardano-serialization-lib-nodejs").PlutusData): import("@emurgo/cardano-serialization-lib-nodejs").DataHash;
        hash_script_data(redeemers: import("@emurgo/cardano-serialization-lib-nodejs").Redeemers, cost_models: import("@emurgo/cardano-serialization-lib-nodejs").Costmdls, datums?: import("@emurgo/cardano-serialization-lib-nodejs").PlutusList): import("@emurgo/cardano-serialization-lib-nodejs").ScriptDataHash;
        get_implicit_input(txbody: import("@emurgo/cardano-serialization-lib-nodejs").TransactionBody, pool_deposit: import("@emurgo/cardano-serialization-lib-nodejs").BigNum, key_deposit: import("@emurgo/cardano-serialization-lib-nodejs").BigNum): import("@emurgo/cardano-serialization-lib-nodejs").Value;
        get_deposit(txbody: import("@emurgo/cardano-serialization-lib-nodejs").TransactionBody, pool_deposit: import("@emurgo/cardano-serialization-lib-nodejs").BigNum, key_deposit: import("@emurgo/cardano-serialization-lib-nodejs").BigNum): import("@emurgo/cardano-serialization-lib-nodejs").BigNum;
        min_ada_for_output(output: import("@emurgo/cardano-serialization-lib-nodejs").TransactionOutput, data_cost: import("@emurgo/cardano-serialization-lib-nodejs").DataCost): import("@emurgo/cardano-serialization-lib-nodejs").BigNum;
        min_ada_required(assets: import("@emurgo/cardano-serialization-lib-nodejs").Value, has_data_hash: boolean, coins_per_utxo_word: import("@emurgo/cardano-serialization-lib-nodejs").BigNum): import("@emurgo/cardano-serialization-lib-nodejs").BigNum;
        encode_json_str_to_native_script(json: string, self_xpub: string, schema: number): import("@emurgo/cardano-serialization-lib-nodejs").NativeScript;
        CertificateKind: typeof import("@emurgo/cardano-serialization-lib-nodejs").CertificateKind;
        MIRPot: typeof import("@emurgo/cardano-serialization-lib-nodejs").MIRPot;
        MIRKind: typeof import("@emurgo/cardano-serialization-lib-nodejs").MIRKind;
        RelayKind: typeof import("@emurgo/cardano-serialization-lib-nodejs").RelayKind;
        NativeScriptKind: typeof import("@emurgo/cardano-serialization-lib-nodejs").NativeScriptKind;
        ScriptHashNamespace: typeof import("@emurgo/cardano-serialization-lib-nodejs").ScriptHashNamespace;
        NetworkIdKind: typeof import("@emurgo/cardano-serialization-lib-nodejs").NetworkIdKind;
        LanguageKind: typeof import("@emurgo/cardano-serialization-lib-nodejs").LanguageKind;
        PlutusDataKind: typeof import("@emurgo/cardano-serialization-lib-nodejs").PlutusDataKind;
        RedeemerTagKind: typeof import("@emurgo/cardano-serialization-lib-nodejs").RedeemerTagKind;
        PlutusDatumSchema: typeof import("@emurgo/cardano-serialization-lib-nodejs").PlutusDatumSchema;
        TransactionMetadatumKind: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionMetadatumKind;
        MetadataJsonSchema: typeof import("@emurgo/cardano-serialization-lib-nodejs").MetadataJsonSchema;
        CoinSelectionStrategyCIP2: typeof import("@emurgo/cardano-serialization-lib-nodejs").CoinSelectionStrategyCIP2;
        StakeCredKind: typeof import("@emurgo/cardano-serialization-lib-nodejs").StakeCredKind;
        ScriptSchema: typeof import("@emurgo/cardano-serialization-lib-nodejs").ScriptSchema;
        CborContainerType: typeof import("@emurgo/cardano-serialization-lib-nodejs").CborContainerType;
        Address: typeof import("@emurgo/cardano-serialization-lib-nodejs").Address;
        AssetName: typeof import("@emurgo/cardano-serialization-lib-nodejs").AssetName;
        AssetNames: typeof import("@emurgo/cardano-serialization-lib-nodejs").AssetNames;
        Assets: typeof import("@emurgo/cardano-serialization-lib-nodejs").Assets;
        AuxiliaryData: typeof import("@emurgo/cardano-serialization-lib-nodejs").AuxiliaryData;
        AuxiliaryDataHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").AuxiliaryDataHash;
        AuxiliaryDataSet: typeof import("@emurgo/cardano-serialization-lib-nodejs").AuxiliaryDataSet;
        BaseAddress: typeof import("@emurgo/cardano-serialization-lib-nodejs").BaseAddress;
        BigInt: typeof import("@emurgo/cardano-serialization-lib-nodejs").BigInt;
        BigNum: typeof import("@emurgo/cardano-serialization-lib-nodejs").BigNum;
        Bip32PrivateKey: typeof import("@emurgo/cardano-serialization-lib-nodejs").Bip32PrivateKey;
        Bip32PublicKey: typeof import("@emurgo/cardano-serialization-lib-nodejs").Bip32PublicKey;
        Block: typeof import("@emurgo/cardano-serialization-lib-nodejs").Block;
        BlockHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").BlockHash;
        BootstrapWitness: typeof import("@emurgo/cardano-serialization-lib-nodejs").BootstrapWitness;
        BootstrapWitnesses: typeof import("@emurgo/cardano-serialization-lib-nodejs").BootstrapWitnesses;
        ByronAddress: typeof import("@emurgo/cardano-serialization-lib-nodejs").ByronAddress;
        Certificate: typeof import("@emurgo/cardano-serialization-lib-nodejs").Certificate;
        Certificates: typeof import("@emurgo/cardano-serialization-lib-nodejs").Certificates;
        ConstrPlutusData: typeof import("@emurgo/cardano-serialization-lib-nodejs").ConstrPlutusData;
        CostModel: typeof import("@emurgo/cardano-serialization-lib-nodejs").CostModel;
        Costmdls: typeof import("@emurgo/cardano-serialization-lib-nodejs").Costmdls;
        DNSRecordAorAAAA: typeof import("@emurgo/cardano-serialization-lib-nodejs").DNSRecordAorAAAA;
        DNSRecordSRV: typeof import("@emurgo/cardano-serialization-lib-nodejs").DNSRecordSRV;
        DataCost: typeof import("@emurgo/cardano-serialization-lib-nodejs").DataCost;
        DataHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").DataHash;
        DatumSource: typeof import("@emurgo/cardano-serialization-lib-nodejs").DatumSource;
        Ed25519KeyHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").Ed25519KeyHash;
        Ed25519KeyHashes: typeof import("@emurgo/cardano-serialization-lib-nodejs").Ed25519KeyHashes;
        Ed25519Signature: typeof import("@emurgo/cardano-serialization-lib-nodejs").Ed25519Signature;
        EnterpriseAddress: typeof import("@emurgo/cardano-serialization-lib-nodejs").EnterpriseAddress;
        ExUnitPrices: typeof import("@emurgo/cardano-serialization-lib-nodejs").ExUnitPrices;
        ExUnits: typeof import("@emurgo/cardano-serialization-lib-nodejs").ExUnits;
        FixedTransaction: typeof import("@emurgo/cardano-serialization-lib-nodejs").FixedTransaction;
        GeneralTransactionMetadata: typeof import("@emurgo/cardano-serialization-lib-nodejs").GeneralTransactionMetadata;
        GenesisDelegateHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").GenesisDelegateHash;
        GenesisHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").GenesisHash;
        GenesisHashes: typeof import("@emurgo/cardano-serialization-lib-nodejs").GenesisHashes;
        GenesisKeyDelegation: typeof import("@emurgo/cardano-serialization-lib-nodejs").GenesisKeyDelegation;
        Header: typeof import("@emurgo/cardano-serialization-lib-nodejs").Header;
        HeaderBody: typeof import("@emurgo/cardano-serialization-lib-nodejs").HeaderBody;
        InputWithScriptWitness: typeof import("@emurgo/cardano-serialization-lib-nodejs").InputWithScriptWitness;
        InputsWithScriptWitness: typeof import("@emurgo/cardano-serialization-lib-nodejs").InputsWithScriptWitness;
        Int: typeof import("@emurgo/cardano-serialization-lib-nodejs").Int;
        Ipv4: typeof import("@emurgo/cardano-serialization-lib-nodejs").Ipv4;
        Ipv6: typeof import("@emurgo/cardano-serialization-lib-nodejs").Ipv6;
        KESSignature: typeof import("@emurgo/cardano-serialization-lib-nodejs").KESSignature;
        KESVKey: typeof import("@emurgo/cardano-serialization-lib-nodejs").KESVKey;
        Language: typeof import("@emurgo/cardano-serialization-lib-nodejs").Language;
        Languages: typeof import("@emurgo/cardano-serialization-lib-nodejs").Languages;
        LegacyDaedalusPrivateKey: typeof import("@emurgo/cardano-serialization-lib-nodejs").LegacyDaedalusPrivateKey;
        LinearFee: typeof import("@emurgo/cardano-serialization-lib-nodejs").LinearFee;
        MIRToStakeCredentials: typeof import("@emurgo/cardano-serialization-lib-nodejs").MIRToStakeCredentials;
        MetadataList: typeof import("@emurgo/cardano-serialization-lib-nodejs").MetadataList;
        MetadataMap: typeof import("@emurgo/cardano-serialization-lib-nodejs").MetadataMap;
        Mint: typeof import("@emurgo/cardano-serialization-lib-nodejs").Mint;
        MintAssets: typeof import("@emurgo/cardano-serialization-lib-nodejs").MintAssets;
        MintBuilder: typeof import("@emurgo/cardano-serialization-lib-nodejs").MintBuilder;
        MintWitness: typeof import("@emurgo/cardano-serialization-lib-nodejs").MintWitness;
        MintsAssets: typeof import("@emurgo/cardano-serialization-lib-nodejs").MintsAssets;
        MoveInstantaneousReward: typeof import("@emurgo/cardano-serialization-lib-nodejs").MoveInstantaneousReward;
        MoveInstantaneousRewardsCert: typeof import("@emurgo/cardano-serialization-lib-nodejs").MoveInstantaneousRewardsCert;
        MultiAsset: typeof import("@emurgo/cardano-serialization-lib-nodejs").MultiAsset;
        MultiHostName: typeof import("@emurgo/cardano-serialization-lib-nodejs").MultiHostName;
        NativeScript: typeof import("@emurgo/cardano-serialization-lib-nodejs").NativeScript;
        NativeScripts: typeof import("@emurgo/cardano-serialization-lib-nodejs").NativeScripts;
        NetworkId: typeof import("@emurgo/cardano-serialization-lib-nodejs").NetworkId;
        NetworkInfo: typeof import("@emurgo/cardano-serialization-lib-nodejs").NetworkInfo;
        Nonce: typeof import("@emurgo/cardano-serialization-lib-nodejs").Nonce;
        OperationalCert: typeof import("@emurgo/cardano-serialization-lib-nodejs").OperationalCert;
        PlutusData: typeof import("@emurgo/cardano-serialization-lib-nodejs").PlutusData;
        PlutusList: typeof import("@emurgo/cardano-serialization-lib-nodejs").PlutusList;
        PlutusMap: typeof import("@emurgo/cardano-serialization-lib-nodejs").PlutusMap;
        PlutusScript: typeof import("@emurgo/cardano-serialization-lib-nodejs").PlutusScript;
        PlutusScriptSource: typeof import("@emurgo/cardano-serialization-lib-nodejs").PlutusScriptSource;
        PlutusScripts: typeof import("@emurgo/cardano-serialization-lib-nodejs").PlutusScripts;
        PlutusWitness: typeof import("@emurgo/cardano-serialization-lib-nodejs").PlutusWitness;
        PlutusWitnesses: typeof import("@emurgo/cardano-serialization-lib-nodejs").PlutusWitnesses;
        Pointer: typeof import("@emurgo/cardano-serialization-lib-nodejs").Pointer;
        PointerAddress: typeof import("@emurgo/cardano-serialization-lib-nodejs").PointerAddress;
        PoolMetadata: typeof import("@emurgo/cardano-serialization-lib-nodejs").PoolMetadata;
        PoolMetadataHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").PoolMetadataHash;
        PoolParams: typeof import("@emurgo/cardano-serialization-lib-nodejs").PoolParams;
        PoolRegistration: typeof import("@emurgo/cardano-serialization-lib-nodejs").PoolRegistration;
        PoolRetirement: typeof import("@emurgo/cardano-serialization-lib-nodejs").PoolRetirement;
        PrivateKey: typeof import("@emurgo/cardano-serialization-lib-nodejs").PrivateKey;
        ProposedProtocolParameterUpdates: typeof import("@emurgo/cardano-serialization-lib-nodejs").ProposedProtocolParameterUpdates;
        ProtocolParamUpdate: typeof import("@emurgo/cardano-serialization-lib-nodejs").ProtocolParamUpdate;
        ProtocolVersion: typeof import("@emurgo/cardano-serialization-lib-nodejs").ProtocolVersion;
        PublicKey: typeof import("@emurgo/cardano-serialization-lib-nodejs").PublicKey;
        PublicKeys: typeof import("@emurgo/cardano-serialization-lib-nodejs").PublicKeys;
        Redeemer: typeof import("@emurgo/cardano-serialization-lib-nodejs").Redeemer;
        RedeemerTag: typeof import("@emurgo/cardano-serialization-lib-nodejs").RedeemerTag;
        Redeemers: typeof import("@emurgo/cardano-serialization-lib-nodejs").Redeemers;
        Relay: typeof import("@emurgo/cardano-serialization-lib-nodejs").Relay;
        Relays: typeof import("@emurgo/cardano-serialization-lib-nodejs").Relays;
        RewardAddress: typeof import("@emurgo/cardano-serialization-lib-nodejs").RewardAddress;
        RewardAddresses: typeof import("@emurgo/cardano-serialization-lib-nodejs").RewardAddresses;
        ScriptAll: typeof import("@emurgo/cardano-serialization-lib-nodejs").ScriptAll;
        ScriptAny: typeof import("@emurgo/cardano-serialization-lib-nodejs").ScriptAny;
        ScriptDataHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").ScriptDataHash;
        ScriptHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").ScriptHash;
        ScriptHashes: typeof import("@emurgo/cardano-serialization-lib-nodejs").ScriptHashes;
        ScriptNOfK: typeof import("@emurgo/cardano-serialization-lib-nodejs").ScriptNOfK;
        ScriptPubkey: typeof import("@emurgo/cardano-serialization-lib-nodejs").ScriptPubkey;
        ScriptRef: typeof import("@emurgo/cardano-serialization-lib-nodejs").ScriptRef;
        SingleHostAddr: typeof import("@emurgo/cardano-serialization-lib-nodejs").SingleHostAddr;
        SingleHostName: typeof import("@emurgo/cardano-serialization-lib-nodejs").SingleHostName;
        StakeCredential: typeof import("@emurgo/cardano-serialization-lib-nodejs").StakeCredential;
        StakeCredentials: typeof import("@emurgo/cardano-serialization-lib-nodejs").StakeCredentials;
        StakeDelegation: typeof import("@emurgo/cardano-serialization-lib-nodejs").StakeDelegation;
        StakeDeregistration: typeof import("@emurgo/cardano-serialization-lib-nodejs").StakeDeregistration;
        StakeRegistration: typeof import("@emurgo/cardano-serialization-lib-nodejs").StakeRegistration;
        Strings: typeof import("@emurgo/cardano-serialization-lib-nodejs").Strings;
        TimelockExpiry: typeof import("@emurgo/cardano-serialization-lib-nodejs").TimelockExpiry;
        TimelockStart: typeof import("@emurgo/cardano-serialization-lib-nodejs").TimelockStart;
        Transaction: typeof import("@emurgo/cardano-serialization-lib-nodejs").Transaction;
        TransactionBatch: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionBatch;
        TransactionBatchList: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionBatchList;
        TransactionBodies: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionBodies;
        TransactionBody: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionBody;
        TransactionBuilder: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionBuilder;
        TransactionBuilderConfig: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionBuilderConfig;
        TransactionBuilderConfigBuilder: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionBuilderConfigBuilder;
        TransactionHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionHash;
        TransactionInput: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionInput;
        TransactionInputs: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionInputs;
        TransactionMetadatum: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionMetadatum;
        TransactionMetadatumLabels: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionMetadatumLabels;
        TransactionOutput: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionOutput;
        TransactionOutputAmountBuilder: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionOutputAmountBuilder;
        TransactionOutputBuilder: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionOutputBuilder;
        TransactionOutputs: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionOutputs;
        TransactionUnspentOutput: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionUnspentOutput;
        TransactionUnspentOutputs: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionUnspentOutputs;
        TransactionWitnessSet: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionWitnessSet;
        TransactionWitnessSets: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionWitnessSets;
        TxBuilderConstants: typeof import("@emurgo/cardano-serialization-lib-nodejs").TxBuilderConstants;
        TxInputsBuilder: typeof import("@emurgo/cardano-serialization-lib-nodejs").TxInputsBuilder;
        URL: typeof import("@emurgo/cardano-serialization-lib-nodejs").URL;
        UnitInterval: typeof import("@emurgo/cardano-serialization-lib-nodejs").UnitInterval;
        Update: typeof import("@emurgo/cardano-serialization-lib-nodejs").Update;
        VRFCert: typeof import("@emurgo/cardano-serialization-lib-nodejs").VRFCert;
        VRFKeyHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").VRFKeyHash;
        VRFVKey: typeof import("@emurgo/cardano-serialization-lib-nodejs").VRFVKey;
        Value: typeof import("@emurgo/cardano-serialization-lib-nodejs").Value;
        Vkey: typeof import("@emurgo/cardano-serialization-lib-nodejs").Vkey;
        Vkeys: typeof import("@emurgo/cardano-serialization-lib-nodejs").Vkeys;
        Vkeywitness: typeof import("@emurgo/cardano-serialization-lib-nodejs").Vkeywitness;
        Vkeywitnesses: typeof import("@emurgo/cardano-serialization-lib-nodejs").Vkeywitnesses;
        Withdrawals: typeof import("@emurgo/cardano-serialization-lib-nodejs").Withdrawals;
    }]>;
    /**
     * Gets core lib instance
     * @returns {Promise<import('./libs/AdaLibApi').default>}
     */
    getCoreLibrary(): Promise<any>;
    loadLibs(): Promise<object[] | [{
        default: typeof import("cardano-wallet");
        paper_wallet_scramble(entropy: import("cardano-wallet").Entropy, iv: Uint8Array, password: string): any;
        paper_wallet_unscramble(paper: Uint8Array, password: string): import("cardano-wallet").Entropy;
        password_encrypt(password: string, salt: Uint8Array, nonce: Uint8Array, data: Uint8Array): any;
        password_decrypt(password: string, encrypted_data: Uint8Array): any;
        AccountIndex: typeof import("cardano-wallet").AccountIndex;
        Address: typeof import("cardano-wallet").Address;
        AddressKeyIndex: typeof import("cardano-wallet").AddressKeyIndex;
        Bip44AccountPrivate: typeof import("cardano-wallet").Bip44AccountPrivate;
        Bip44AccountPublic: typeof import("cardano-wallet").Bip44AccountPublic;
        Bip44ChainPrivate: typeof import("cardano-wallet").Bip44ChainPrivate;
        Bip44ChainPublic: typeof import("cardano-wallet").Bip44ChainPublic;
        Bip44RootPrivateKey: typeof import("cardano-wallet").Bip44RootPrivateKey;
        BlockchainSettings: typeof import("cardano-wallet").BlockchainSettings;
        Coin: typeof import("cardano-wallet").Coin;
        CoinDiff: typeof import("cardano-wallet").CoinDiff;
        DaedalusAddressChecker: typeof import("cardano-wallet").DaedalusAddressChecker;
        DaedalusCheckedAddress: typeof import("cardano-wallet").DaedalusCheckedAddress;
        DaedalusWallet: typeof import("cardano-wallet").DaedalusWallet;
        DerivationScheme: typeof import("cardano-wallet").DerivationScheme;
        Entropy: typeof import("cardano-wallet").Entropy;
        InputSelectionBuilder: typeof import("cardano-wallet").InputSelectionBuilder;
        InputSelectionResult: typeof import("cardano-wallet").InputSelectionResult;
        LinearFeeAlgorithm: typeof import("cardano-wallet").LinearFeeAlgorithm;
        OutputPolicy: typeof import("cardano-wallet").OutputPolicy;
        PrivateKey: typeof import("cardano-wallet").PrivateKey;
        PrivateRedeemKey: typeof import("cardano-wallet").PrivateRedeemKey;
        PublicKey: typeof import("cardano-wallet").PublicKey;
        PublicRedeemKey: typeof import("cardano-wallet").PublicRedeemKey;
        RedeemSignature: typeof import("cardano-wallet").RedeemSignature;
        Signature: typeof import("cardano-wallet").Signature;
        SignedTransaction: typeof import("cardano-wallet").SignedTransaction;
        Transaction: typeof import("cardano-wallet").Transaction;
        TransactionBuilder: typeof import("cardano-wallet").TransactionBuilder;
        TransactionFinalized: typeof import("cardano-wallet").TransactionFinalized;
        TransactionId: typeof import("cardano-wallet").TransactionId;
        TransactionSignature: typeof import("cardano-wallet").TransactionSignature;
        TxInput: typeof import("cardano-wallet").TxInput;
        TxOut: typeof import("cardano-wallet").TxOut;
        TxoPointer: typeof import("cardano-wallet").TxoPointer;
        Witness: typeof import("cardano-wallet").Witness;
    }, {
        default: typeof import("@emurgo/cardano-serialization-lib-nodejs");
        encode_json_str_to_plutus_datum(json: string, schema: number): import("@emurgo/cardano-serialization-lib-nodejs").PlutusData;
        decode_plutus_datum_to_json_str(datum: import("@emurgo/cardano-serialization-lib-nodejs").PlutusData, schema: number): string;
        encode_arbitrary_bytes_as_metadatum(bytes: Uint8Array): import("@emurgo/cardano-serialization-lib-nodejs").TransactionMetadatum;
        decode_arbitrary_bytes_from_metadatum(metadata: import("@emurgo/cardano-serialization-lib-nodejs").TransactionMetadatum): Uint8Array;
        encode_json_str_to_metadatum(json: string, schema: number): import("@emurgo/cardano-serialization-lib-nodejs").TransactionMetadatum;
        decode_metadatum_to_json_str(metadatum: import("@emurgo/cardano-serialization-lib-nodejs").TransactionMetadatum, schema: number): string;
        min_fee(tx: import("@emurgo/cardano-serialization-lib-nodejs").Transaction, linear_fee: import("@emurgo/cardano-serialization-lib-nodejs").LinearFee): import("@emurgo/cardano-serialization-lib-nodejs").BigNum;
        calculate_ex_units_ceil_cost(ex_units: import("@emurgo/cardano-serialization-lib-nodejs").ExUnits, ex_unit_prices: import("@emurgo/cardano-serialization-lib-nodejs").ExUnitPrices): import("@emurgo/cardano-serialization-lib-nodejs").BigNum;
        min_script_fee(tx: import("@emurgo/cardano-serialization-lib-nodejs").Transaction, ex_unit_prices: import("@emurgo/cardano-serialization-lib-nodejs").ExUnitPrices): import("@emurgo/cardano-serialization-lib-nodejs").BigNum;
        encrypt_with_password(password: string, salt: string, nonce: string, data: string): string;
        decrypt_with_password(password: string, data: string): string;
        create_send_all(address: import("@emurgo/cardano-serialization-lib-nodejs").Address, utxos: import("@emurgo/cardano-serialization-lib-nodejs").TransactionUnspentOutputs, config: import("@emurgo/cardano-serialization-lib-nodejs").TransactionBuilderConfig): import("@emurgo/cardano-serialization-lib-nodejs").TransactionBatchList;
        make_daedalus_bootstrap_witness(tx_body_hash: import("@emurgo/cardano-serialization-lib-nodejs").TransactionHash, addr: import("@emurgo/cardano-serialization-lib-nodejs").ByronAddress, key: import("@emurgo/cardano-serialization-lib-nodejs").LegacyDaedalusPrivateKey): import("@emurgo/cardano-serialization-lib-nodejs").BootstrapWitness;
        make_icarus_bootstrap_witness(tx_body_hash: import("@emurgo/cardano-serialization-lib-nodejs").TransactionHash, addr: import("@emurgo/cardano-serialization-lib-nodejs").ByronAddress, key: import("@emurgo/cardano-serialization-lib-nodejs").Bip32PrivateKey): import("@emurgo/cardano-serialization-lib-nodejs").BootstrapWitness;
        make_vkey_witness(tx_body_hash: import("@emurgo/cardano-serialization-lib-nodejs").TransactionHash, sk: import("@emurgo/cardano-serialization-lib-nodejs").PrivateKey): import("@emurgo/cardano-serialization-lib-nodejs").Vkeywitness;
        hash_auxiliary_data(auxiliary_data: import("@emurgo/cardano-serialization-lib-nodejs").AuxiliaryData): import("@emurgo/cardano-serialization-lib-nodejs").AuxiliaryDataHash;
        hash_transaction(tx_body: import("@emurgo/cardano-serialization-lib-nodejs").TransactionBody): import("@emurgo/cardano-serialization-lib-nodejs").TransactionHash;
        hash_plutus_data(plutus_data: import("@emurgo/cardano-serialization-lib-nodejs").PlutusData): import("@emurgo/cardano-serialization-lib-nodejs").DataHash;
        hash_script_data(redeemers: import("@emurgo/cardano-serialization-lib-nodejs").Redeemers, cost_models: import("@emurgo/cardano-serialization-lib-nodejs").Costmdls, datums?: import("@emurgo/cardano-serialization-lib-nodejs").PlutusList): import("@emurgo/cardano-serialization-lib-nodejs").ScriptDataHash;
        get_implicit_input(txbody: import("@emurgo/cardano-serialization-lib-nodejs").TransactionBody, pool_deposit: import("@emurgo/cardano-serialization-lib-nodejs").BigNum, key_deposit: import("@emurgo/cardano-serialization-lib-nodejs").BigNum): import("@emurgo/cardano-serialization-lib-nodejs").Value;
        get_deposit(txbody: import("@emurgo/cardano-serialization-lib-nodejs").TransactionBody, pool_deposit: import("@emurgo/cardano-serialization-lib-nodejs").BigNum, key_deposit: import("@emurgo/cardano-serialization-lib-nodejs").BigNum): import("@emurgo/cardano-serialization-lib-nodejs").BigNum;
        min_ada_for_output(output: import("@emurgo/cardano-serialization-lib-nodejs").TransactionOutput, data_cost: import("@emurgo/cardano-serialization-lib-nodejs").DataCost): import("@emurgo/cardano-serialization-lib-nodejs").BigNum;
        min_ada_required(assets: import("@emurgo/cardano-serialization-lib-nodejs").Value, has_data_hash: boolean, coins_per_utxo_word: import("@emurgo/cardano-serialization-lib-nodejs").BigNum): import("@emurgo/cardano-serialization-lib-nodejs").BigNum;
        encode_json_str_to_native_script(json: string, self_xpub: string, schema: number): import("@emurgo/cardano-serialization-lib-nodejs").NativeScript;
        CertificateKind: typeof import("@emurgo/cardano-serialization-lib-nodejs").CertificateKind;
        MIRPot: typeof import("@emurgo/cardano-serialization-lib-nodejs").MIRPot;
        MIRKind: typeof import("@emurgo/cardano-serialization-lib-nodejs").MIRKind;
        RelayKind: typeof import("@emurgo/cardano-serialization-lib-nodejs").RelayKind;
        NativeScriptKind: typeof import("@emurgo/cardano-serialization-lib-nodejs").NativeScriptKind;
        ScriptHashNamespace: typeof import("@emurgo/cardano-serialization-lib-nodejs").ScriptHashNamespace;
        NetworkIdKind: typeof import("@emurgo/cardano-serialization-lib-nodejs").NetworkIdKind;
        LanguageKind: typeof import("@emurgo/cardano-serialization-lib-nodejs").LanguageKind;
        PlutusDataKind: typeof import("@emurgo/cardano-serialization-lib-nodejs").PlutusDataKind;
        RedeemerTagKind: typeof import("@emurgo/cardano-serialization-lib-nodejs").RedeemerTagKind;
        PlutusDatumSchema: typeof import("@emurgo/cardano-serialization-lib-nodejs").PlutusDatumSchema;
        TransactionMetadatumKind: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionMetadatumKind;
        MetadataJsonSchema: typeof import("@emurgo/cardano-serialization-lib-nodejs").MetadataJsonSchema;
        CoinSelectionStrategyCIP2: typeof import("@emurgo/cardano-serialization-lib-nodejs").CoinSelectionStrategyCIP2;
        StakeCredKind: typeof import("@emurgo/cardano-serialization-lib-nodejs").StakeCredKind;
        ScriptSchema: typeof import("@emurgo/cardano-serialization-lib-nodejs").ScriptSchema;
        CborContainerType: typeof import("@emurgo/cardano-serialization-lib-nodejs").CborContainerType;
        Address: typeof import("@emurgo/cardano-serialization-lib-nodejs").Address;
        AssetName: typeof import("@emurgo/cardano-serialization-lib-nodejs").AssetName;
        AssetNames: typeof import("@emurgo/cardano-serialization-lib-nodejs").AssetNames;
        Assets: typeof import("@emurgo/cardano-serialization-lib-nodejs").Assets;
        AuxiliaryData: typeof import("@emurgo/cardano-serialization-lib-nodejs").AuxiliaryData;
        AuxiliaryDataHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").AuxiliaryDataHash;
        AuxiliaryDataSet: typeof import("@emurgo/cardano-serialization-lib-nodejs").AuxiliaryDataSet;
        BaseAddress: typeof import("@emurgo/cardano-serialization-lib-nodejs").BaseAddress;
        BigInt: typeof import("@emurgo/cardano-serialization-lib-nodejs").BigInt;
        BigNum: typeof import("@emurgo/cardano-serialization-lib-nodejs").BigNum;
        Bip32PrivateKey: typeof import("@emurgo/cardano-serialization-lib-nodejs").Bip32PrivateKey;
        Bip32PublicKey: typeof import("@emurgo/cardano-serialization-lib-nodejs").Bip32PublicKey;
        Block: typeof import("@emurgo/cardano-serialization-lib-nodejs").Block;
        BlockHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").BlockHash;
        BootstrapWitness: typeof import("@emurgo/cardano-serialization-lib-nodejs").BootstrapWitness;
        BootstrapWitnesses: typeof import("@emurgo/cardano-serialization-lib-nodejs").BootstrapWitnesses;
        ByronAddress: typeof import("@emurgo/cardano-serialization-lib-nodejs").ByronAddress;
        Certificate: typeof import("@emurgo/cardano-serialization-lib-nodejs").Certificate;
        Certificates: typeof import("@emurgo/cardano-serialization-lib-nodejs").Certificates;
        ConstrPlutusData: typeof import("@emurgo/cardano-serialization-lib-nodejs").ConstrPlutusData;
        CostModel: typeof import("@emurgo/cardano-serialization-lib-nodejs").CostModel;
        Costmdls: typeof import("@emurgo/cardano-serialization-lib-nodejs").Costmdls;
        DNSRecordAorAAAA: typeof import("@emurgo/cardano-serialization-lib-nodejs").DNSRecordAorAAAA;
        DNSRecordSRV: typeof import("@emurgo/cardano-serialization-lib-nodejs").DNSRecordSRV;
        DataCost: typeof import("@emurgo/cardano-serialization-lib-nodejs").DataCost;
        DataHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").DataHash;
        DatumSource: typeof import("@emurgo/cardano-serialization-lib-nodejs").DatumSource;
        Ed25519KeyHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").Ed25519KeyHash;
        Ed25519KeyHashes: typeof import("@emurgo/cardano-serialization-lib-nodejs").Ed25519KeyHashes;
        Ed25519Signature: typeof import("@emurgo/cardano-serialization-lib-nodejs").Ed25519Signature;
        EnterpriseAddress: typeof import("@emurgo/cardano-serialization-lib-nodejs").EnterpriseAddress;
        ExUnitPrices: typeof import("@emurgo/cardano-serialization-lib-nodejs").ExUnitPrices;
        ExUnits: typeof import("@emurgo/cardano-serialization-lib-nodejs").ExUnits;
        FixedTransaction: typeof import("@emurgo/cardano-serialization-lib-nodejs").FixedTransaction;
        GeneralTransactionMetadata: typeof import("@emurgo/cardano-serialization-lib-nodejs").GeneralTransactionMetadata;
        GenesisDelegateHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").GenesisDelegateHash;
        GenesisHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").GenesisHash;
        GenesisHashes: typeof import("@emurgo/cardano-serialization-lib-nodejs").GenesisHashes;
        GenesisKeyDelegation: typeof import("@emurgo/cardano-serialization-lib-nodejs").GenesisKeyDelegation;
        Header: typeof import("@emurgo/cardano-serialization-lib-nodejs").Header;
        HeaderBody: typeof import("@emurgo/cardano-serialization-lib-nodejs").HeaderBody;
        InputWithScriptWitness: typeof import("@emurgo/cardano-serialization-lib-nodejs").InputWithScriptWitness;
        InputsWithScriptWitness: typeof import("@emurgo/cardano-serialization-lib-nodejs").InputsWithScriptWitness;
        Int: typeof import("@emurgo/cardano-serialization-lib-nodejs").Int;
        Ipv4: typeof import("@emurgo/cardano-serialization-lib-nodejs").Ipv4;
        Ipv6: typeof import("@emurgo/cardano-serialization-lib-nodejs").Ipv6;
        KESSignature: typeof import("@emurgo/cardano-serialization-lib-nodejs").KESSignature;
        KESVKey: typeof import("@emurgo/cardano-serialization-lib-nodejs").KESVKey;
        Language: typeof import("@emurgo/cardano-serialization-lib-nodejs").Language;
        Languages: typeof import("@emurgo/cardano-serialization-lib-nodejs").Languages;
        LegacyDaedalusPrivateKey: typeof import("@emurgo/cardano-serialization-lib-nodejs").LegacyDaedalusPrivateKey;
        LinearFee: typeof import("@emurgo/cardano-serialization-lib-nodejs").LinearFee;
        MIRToStakeCredentials: typeof import("@emurgo/cardano-serialization-lib-nodejs").MIRToStakeCredentials;
        MetadataList: typeof import("@emurgo/cardano-serialization-lib-nodejs").MetadataList;
        MetadataMap: typeof import("@emurgo/cardano-serialization-lib-nodejs").MetadataMap;
        Mint: typeof import("@emurgo/cardano-serialization-lib-nodejs").Mint;
        MintAssets: typeof import("@emurgo/cardano-serialization-lib-nodejs").MintAssets;
        MintBuilder: typeof import("@emurgo/cardano-serialization-lib-nodejs").MintBuilder;
        MintWitness: typeof import("@emurgo/cardano-serialization-lib-nodejs").MintWitness;
        MintsAssets: typeof import("@emurgo/cardano-serialization-lib-nodejs").MintsAssets;
        MoveInstantaneousReward: typeof import("@emurgo/cardano-serialization-lib-nodejs").MoveInstantaneousReward;
        MoveInstantaneousRewardsCert: typeof import("@emurgo/cardano-serialization-lib-nodejs").MoveInstantaneousRewardsCert;
        MultiAsset: typeof import("@emurgo/cardano-serialization-lib-nodejs").MultiAsset;
        MultiHostName: typeof import("@emurgo/cardano-serialization-lib-nodejs").MultiHostName;
        NativeScript: typeof import("@emurgo/cardano-serialization-lib-nodejs").NativeScript;
        NativeScripts: typeof import("@emurgo/cardano-serialization-lib-nodejs").NativeScripts;
        NetworkId: typeof import("@emurgo/cardano-serialization-lib-nodejs").NetworkId;
        NetworkInfo: typeof import("@emurgo/cardano-serialization-lib-nodejs").NetworkInfo;
        Nonce: typeof import("@emurgo/cardano-serialization-lib-nodejs").Nonce;
        OperationalCert: typeof import("@emurgo/cardano-serialization-lib-nodejs").OperationalCert;
        PlutusData: typeof import("@emurgo/cardano-serialization-lib-nodejs").PlutusData;
        PlutusList: typeof import("@emurgo/cardano-serialization-lib-nodejs").PlutusList;
        PlutusMap: typeof import("@emurgo/cardano-serialization-lib-nodejs").PlutusMap;
        PlutusScript: typeof import("@emurgo/cardano-serialization-lib-nodejs").PlutusScript;
        PlutusScriptSource: typeof import("@emurgo/cardano-serialization-lib-nodejs").PlutusScriptSource;
        PlutusScripts: typeof import("@emurgo/cardano-serialization-lib-nodejs").PlutusScripts;
        PlutusWitness: typeof import("@emurgo/cardano-serialization-lib-nodejs").PlutusWitness;
        PlutusWitnesses: typeof import("@emurgo/cardano-serialization-lib-nodejs").PlutusWitnesses;
        Pointer: typeof import("@emurgo/cardano-serialization-lib-nodejs").Pointer;
        PointerAddress: typeof import("@emurgo/cardano-serialization-lib-nodejs").PointerAddress;
        PoolMetadata: typeof import("@emurgo/cardano-serialization-lib-nodejs").PoolMetadata;
        PoolMetadataHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").PoolMetadataHash;
        PoolParams: typeof import("@emurgo/cardano-serialization-lib-nodejs").PoolParams;
        PoolRegistration: typeof import("@emurgo/cardano-serialization-lib-nodejs").PoolRegistration;
        PoolRetirement: typeof import("@emurgo/cardano-serialization-lib-nodejs").PoolRetirement;
        PrivateKey: typeof import("@emurgo/cardano-serialization-lib-nodejs").PrivateKey;
        ProposedProtocolParameterUpdates: typeof import("@emurgo/cardano-serialization-lib-nodejs").ProposedProtocolParameterUpdates;
        ProtocolParamUpdate: typeof import("@emurgo/cardano-serialization-lib-nodejs").ProtocolParamUpdate;
        ProtocolVersion: typeof import("@emurgo/cardano-serialization-lib-nodejs").ProtocolVersion;
        PublicKey: typeof import("@emurgo/cardano-serialization-lib-nodejs").PublicKey;
        PublicKeys: typeof import("@emurgo/cardano-serialization-lib-nodejs").PublicKeys;
        Redeemer: typeof import("@emurgo/cardano-serialization-lib-nodejs").Redeemer;
        RedeemerTag: typeof import("@emurgo/cardano-serialization-lib-nodejs").RedeemerTag;
        Redeemers: typeof import("@emurgo/cardano-serialization-lib-nodejs").Redeemers;
        Relay: typeof import("@emurgo/cardano-serialization-lib-nodejs").Relay;
        Relays: typeof import("@emurgo/cardano-serialization-lib-nodejs").Relays;
        RewardAddress: typeof import("@emurgo/cardano-serialization-lib-nodejs").RewardAddress;
        RewardAddresses: typeof import("@emurgo/cardano-serialization-lib-nodejs").RewardAddresses;
        ScriptAll: typeof import("@emurgo/cardano-serialization-lib-nodejs").ScriptAll;
        ScriptAny: typeof import("@emurgo/cardano-serialization-lib-nodejs").ScriptAny;
        ScriptDataHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").ScriptDataHash;
        ScriptHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").ScriptHash;
        ScriptHashes: typeof import("@emurgo/cardano-serialization-lib-nodejs").ScriptHashes;
        ScriptNOfK: typeof import("@emurgo/cardano-serialization-lib-nodejs").ScriptNOfK;
        ScriptPubkey: typeof import("@emurgo/cardano-serialization-lib-nodejs").ScriptPubkey;
        ScriptRef: typeof import("@emurgo/cardano-serialization-lib-nodejs").ScriptRef;
        SingleHostAddr: typeof import("@emurgo/cardano-serialization-lib-nodejs").SingleHostAddr;
        SingleHostName: typeof import("@emurgo/cardano-serialization-lib-nodejs").SingleHostName;
        StakeCredential: typeof import("@emurgo/cardano-serialization-lib-nodejs").StakeCredential;
        StakeCredentials: typeof import("@emurgo/cardano-serialization-lib-nodejs").StakeCredentials;
        StakeDelegation: typeof import("@emurgo/cardano-serialization-lib-nodejs").StakeDelegation;
        StakeDeregistration: typeof import("@emurgo/cardano-serialization-lib-nodejs").StakeDeregistration;
        StakeRegistration: typeof import("@emurgo/cardano-serialization-lib-nodejs").StakeRegistration;
        Strings: typeof import("@emurgo/cardano-serialization-lib-nodejs").Strings;
        TimelockExpiry: typeof import("@emurgo/cardano-serialization-lib-nodejs").TimelockExpiry;
        TimelockStart: typeof import("@emurgo/cardano-serialization-lib-nodejs").TimelockStart;
        Transaction: typeof import("@emurgo/cardano-serialization-lib-nodejs").Transaction;
        TransactionBatch: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionBatch;
        TransactionBatchList: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionBatchList;
        TransactionBodies: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionBodies;
        TransactionBody: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionBody;
        TransactionBuilder: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionBuilder;
        TransactionBuilderConfig: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionBuilderConfig;
        TransactionBuilderConfigBuilder: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionBuilderConfigBuilder;
        TransactionHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionHash;
        TransactionInput: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionInput;
        TransactionInputs: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionInputs;
        TransactionMetadatum: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionMetadatum;
        TransactionMetadatumLabels: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionMetadatumLabels;
        TransactionOutput: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionOutput;
        TransactionOutputAmountBuilder: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionOutputAmountBuilder;
        TransactionOutputBuilder: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionOutputBuilder;
        TransactionOutputs: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionOutputs;
        TransactionUnspentOutput: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionUnspentOutput;
        TransactionUnspentOutputs: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionUnspentOutputs;
        TransactionWitnessSet: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionWitnessSet;
        TransactionWitnessSets: typeof import("@emurgo/cardano-serialization-lib-nodejs").TransactionWitnessSets;
        TxBuilderConstants: typeof import("@emurgo/cardano-serialization-lib-nodejs").TxBuilderConstants;
        TxInputsBuilder: typeof import("@emurgo/cardano-serialization-lib-nodejs").TxInputsBuilder;
        URL: typeof import("@emurgo/cardano-serialization-lib-nodejs").URL;
        UnitInterval: typeof import("@emurgo/cardano-serialization-lib-nodejs").UnitInterval;
        Update: typeof import("@emurgo/cardano-serialization-lib-nodejs").Update;
        VRFCert: typeof import("@emurgo/cardano-serialization-lib-nodejs").VRFCert;
        VRFKeyHash: typeof import("@emurgo/cardano-serialization-lib-nodejs").VRFKeyHash;
        VRFVKey: typeof import("@emurgo/cardano-serialization-lib-nodejs").VRFVKey;
        Value: typeof import("@emurgo/cardano-serialization-lib-nodejs").Value;
        Vkey: typeof import("@emurgo/cardano-serialization-lib-nodejs").Vkey;
        Vkeys: typeof import("@emurgo/cardano-serialization-lib-nodejs").Vkeys;
        Vkeywitness: typeof import("@emurgo/cardano-serialization-lib-nodejs").Vkeywitness;
        Vkeywitnesses: typeof import("@emurgo/cardano-serialization-lib-nodejs").Vkeywitnesses;
        Withdrawals: typeof import("@emurgo/cardano-serialization-lib-nodejs").Withdrawals;
    }]>;
    validateStakePoolAddress(poolAddress: any): boolean;
    setPrivateKey(privateKey: any, mnemonic?: undefined): Promise<void>;
    setAddress(address: any): Promise<void>;
    address: any;
    getAddress(): any;
    loadWallet(seed: any, mnemonic: any): Promise<{
        id: any;
        privateKey: {};
        address: any;
    }>;
    getLatestBlock(): any;
    validateAddress(address: any): Promise<any>;
    isDustAmount(amount: any, availableBalance: any): Promise<false | "Minimal amount to send is 1 ADA" | "Minimal change is 1 ADA, try to send another amount">;
    createTransaction({ address, amount, changeAddress }: {
        address: any;
        amount: any;
        changeAddress?: any;
    }): Promise<any>;
    createClaimTransaction(legacyUtxo?: undefined): Promise<any>;
    getLegacyAddressUnspentOutputs(): any;
    getLegacyAddressAvailableBalance({ legacyUtxo, address }: {
        legacyUtxo: any;
        address: any;
    }): Promise<any>;
    getUnspentOutputs(address?: any): any;
    getFee({ amount, address, utxos, changeAddress }?: {
        amount?: null | undefined;
    }): Promise<any>;
    getInfo(): Promise<{
        balance: any;
        balances: {
            available: any;
            rewards: any;
            staking: {
                total: any;
                validator: any;
            };
        };
    }>;
    balance: any;
    balances: {
        available: any;
        rewards: any;
        staking: {
            total: any;
            validator: any;
        };
    } | undefined;
    createDelegationTransaction(poolId: any, stakeAddressRegistered: any): Promise<any>;
    stake(poolId: any): Promise<any>;
    claim(): Promise<any>;
    getDelegatedPoolKey(): any;
    #private;
}
