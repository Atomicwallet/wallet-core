export { BigInteger as JSBigInt };
declare function BigInteger(n: any, s: any, token: any): JSBigInt;
declare namespace BigInteger {
    export function _construct(n: any, s: any): JSBigInt;
    export { BigInteger_base as base };
    export { BigInteger_base_log10 as base_log10 };
    export { ZERO };
    export { ONE };
    export { M_ONE };
    export { ZERO as _0 };
    export { ONE as _1 };
    export let small: JSBigInt[];
    export let digits: string[];
    export let radixRegex: RegExp[];
    export function parse(s: any, base: any): JSBigInt;
    export { MAX_EXP };
}
declare class BigInteger {
    constructor(n: any, s: any, token: any);
    _d: any;
    _s: any;
    toString(base: any): any;
    add(n: any): any;
    negate(): JSBigInt;
    abs(): JSBigInt;
    subtract(n: any): any;
    compareAbs(n: any): any;
    compare(n: any): any;
    isUnit(): boolean;
    multiply(n: any): any;
    multiplySingleDigit(n: any): any;
    square(): JSBigInt;
    quotient(n: any): JSBigInt | undefined;
    divide: any;
    remainder(n: any): JSBigInt | undefined;
    divRem(n: any): JSBigInt[];
    divRemSmall(n: any): JSBigInt[];
    isEven(): boolean;
    isOdd(): boolean;
    sign(): any;
    isPositive(): boolean;
    isNegative(): boolean;
    isZero(): boolean;
    exp10(n: any): JSBigInt | undefined;
    pow(n: any): JSBigInt;
    modPow(exponent: any, modulus: any): JSBigInt;
    log(): number;
    valueOf(): any;
    toJSValue(): number;
    lowVal(): any;
}
declare const BigInteger_base: 10000000;
declare const BigInteger_base_log10: 7;
declare var ZERO: JSBigInt;
declare const ONE: JSBigInt;
declare const M_ONE: JSBigInt;
declare var MAX_EXP: JSBigInt;
